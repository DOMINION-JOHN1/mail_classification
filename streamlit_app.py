# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14wGctWAipoYAxHo3aTFUf-W-K2_nfDhS
"""

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
import joblib

# Define a preprocessing function
def preprocess(mail_text):
    # Step 1: TF-IDF Vectorization
    tfidf_vectorizer = TfidfVectorizer()
    mail_tfidf = tfidf_vectorizer.transform([mail_text])

    # Step 2: Standard Scaling
    scaler = StandardScaler(with_mean=False)
    scaled_features = scaler.transform(mail_tfidf)

    return scaled_features


# Mounting drive so the model can be loaded from google drive
from google.colab import drive
drive.mount('/content')

# Define the path to your model file in Google Drive
model_path = '/content/spam_classifier_model.pkl'

# Load the model
model = joblib.load(model_path)


# Streamlit UI
st.title("Mail Classifier")
st.write("This app predicts whether an email is spam or ham (not spam).")

# Input text box
mail_text = st.text_area("Enter an email message:")

if st.button("Predict"):
    if mail_text:
        # Preprocess the input data and make a prediction
        preprocessed_data = preprocess(mail_text)
        prediction = model.predict(preprocessed_data)

        if prediction == 0:
            st.success("Prediction: Ham (Not Spam)")
        else:
            st.error("Prediction: Spam")
    else:
        st.warning("Please enter an email message to predict.")
